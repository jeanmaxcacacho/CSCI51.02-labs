#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>

int *arr; 

void *run(void *arg) {
    int index = *(int *)arg; 
    int old = arr[index];

    if (index % 2 == 0) {
        arr[index] = arr[index] * arr[index] * arr[index]; 
    } else {
        arr[index] = -arr[index]; 
    }

    printf("arr[%d](%d) has been replaced with arr[%d](%d)\n", index, old, index, arr[index]);

    free(arg); 
    return NULL;
}

int main(int argc, char *argv[]) {
    if (argc == 1) {
        printf("Error: Please provide some integer arguments.\n");
        return 1;
    }

    int count = argc - 1;
    arr = malloc(count * sizeof(int));         // Allocate memory for the array
    pthread_t *threads = malloc(count * sizeof(pthread_t)); // For thread IDs

    for (int i = 0; i < count; i++) {
        arr[i] = atoi(argv[i + 1]); 
    }

    for (int i = 0; i < count; i++) {
        int *index_ptr = malloc(sizeof(int));
        *index_ptr = i;

        pthread_create(&threads[i], NULL, run, index_ptr);
    }

    for (int i = 0; i < count; i++) {
        pthread_join(threads[i], NULL);
    }

    free(arr);
    free(threads);

    return 0;
}
